import React, { createContext, useContext } from "react";

// рззя╕ПтГг ЁЯСЙ ржПржХржЯрж╛ context рждрзИрж░рж┐ ржХрж░рж┐, ржпрж╛рж░ default ржорж╛ржи 0 (ржорж╛ржирзЗ ржкрзНрж░ржержорзЗ level 0)
//    ржПржЦрж╛ржирзЗ context = ржПржХржЯрж╛ global variable, ржпрзЗржЯрж╛ ржЕржирзЗржХ deep ржкрж░рзНржпржирзНржд рж╕ржмрж╛ржЗ ржирж┐рждрзЗ ржкрж╛рж░рзЗред
const LevelContext = createContext(0);

// рзия╕ПтГг Section ржХржорзНржкрзЛржирзЗржирзНржЯ: ржпрзЗржХрзЛржирзЛ ржХрж┐ржЫрзБ wrap ржХрж░рж╛рж░ ржЬржирзНржп ржмрзНржпрж╛ржмрж╣рж╛рж░ рж╣ржмрзЗ
function Section({ children }) {
  // context ржерзЗржХрзЗ ржПржЦржиржХрж╛рж░ (parent) level ржкржбрж╝рж▓рж╛ржо
  const level = useContext(LevelContext);

  // ржПржЦржи <LevelContext.Provider> ржжрж┐рзЯрзЗ ржирж┐ржЪрзЗрж░ рж╕ржм children-ржХрзЗ
  // ржПржХржЯрж╛ ржирждрзБржи ржорж╛ржи ржкрж╛ржарж╛ржмрзЛ тАФ ржорж╛ржирзЗ level+1 (ржПржЯрж╛ рж╣рзЗржбрж┐ржВ-ржПрж░ ржЬржирзНржп ржжрж░ржХрж╛рж░)
  return (
    <section>
      <LevelContext.Provider value={level + 1}>
        {children}
      </LevelContext.Provider>
    </section>
  );
}

// рзйя╕ПтГг Heading ржХржорзНржкрзЛржирзЗржирзНржЯ: ржПржЯрж╛ рж╣рзЗржбрж┐ржВ рж▓рзЗржнрзЗрж▓ (h1, h2...) ржарж┐ржХ ржХрж░ржмрзЗ
function Heading({ children }) {
  // ржЖржмрж╛рж░ context ржерзЗржХрзЗ level ржкржбрж╝рж▓рж╛ржо
  const level = useContext(LevelContext);

  // ржпржжрж┐ ржХрзЗржЙ section-ржПрж░ ржмрж╛ржЗрж░рзЗ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзЗ тАФ Error ржжрж┐ржмрзЗ
  if (level === 0) {
    throw Error('Heading must be inside a Section!');
  }

  // level ржЕржирзБржпрж╛рзЯрзА <h1> ржерзЗржХрзЗ <h6> ржкрж░рзНржпржирзНржд ржжрзЗржЦрж╛ржмрзЗ (ржмрзЗрж╢рж┐ рж╣рж▓рзЗ error)
  switch (level) {
    case 1: return <h1>{children}</h1>;
    case 2: return <h2>{children}</h2>;
    case 3: return <h3>{children}</h3>;
    case 4: return <h4>{children}</h4>;
    case 5: return <h5>{children}</h5>;
    case 6: return <h6>{children}</h6>;
    default: throw Error('Unknown level: ' + level);
  }
}

// рзкя╕ПтГг Post ржХржорзНржкрзЛржирзЗржирзНржЯ: ржПржХржЯрж╛ post ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп
function Post({ title, body }) {
  return (
    // ржПржЦрж╛ржирзЗ Section ржХрзЗ isFancy=true ржкрж╛ржарж╛ржирзЛ рж╣рж▓рзЛ (ржнрж┐ржирзНржиржнрж╛ржмрзЗ ржжрзЗржЦрж╛ржирзЛрж░ ржЬржирзНржп, рж╕рзНржЯрж╛ржЗрж▓ ржЫрж╛ржбрж╝рж╛)
    <Section isFancy={true}>
      <Heading>{title}</Heading>
      <p><i>{body}</i></p>
    </Section>
  );
}

// рзля╕ПтГг RecentPosts ржХржорзНржкрзЛржирзЗржирзНржЯ: ржирждрзБржи ржкрзЛрж╕рзНржЯржЧрзБрж▓рж╛ ржжрзЗржЦрж╛ржмрзЗ
function RecentPosts() {
  return (
    <Section>
      <Heading>Recent Posts</Heading>
      <Post
        title="Flavors of Lisbon"
        body="...those past├йis de nata!"
      />
      <Post
        title="Buenos Aires in the rhythm of tango"
        body="I loved it!"
      />
    </Section>
  );
}

// рзмя╕ПтГг AllPosts ржХржорзНржкрзЛржирзЗржирзНржЯ: рж╕ржм ржкрзЛрж╕рзНржЯрзЗрж░ рж╕рзЗржХрж╢ржи (рждрж╛рж░ ржоржзрзНржпрзЗ recentPosts ржУ ржЖржЫрзЗ)
function AllPosts() {
  return (
    <Section>
      <Heading>Posts</Heading>
      <RecentPosts />
    </Section>
  );
}

// рзня╕ПтГг ProfilePage: ржПржЗржЯрж╛ржЗ ржкрзБрж░рзЛ app-ржПрж░ ржХрж╛ржарж╛ржорзЛ
function ProfilePage() {
  return (
    <Section>
      <Heading>My Profile</Heading>
      <Post
        title="Hello traveller!"
        body="Read about my adventures."
      />
      <AllPosts />
    </Section>
  );
}

// рзоя╕ПтГг App (main/root component): ржПржХржжржо ржЙржкрж░рзЗ ржПржХржЯрж╛ Section ржирж╛ ржерж╛ржХрж▓рзЗ рж╣рзЗржбрж┐ржВ error ржжрж┐ржмрзЗ
export default function Test2() {
  // ржПржЦрж╛ржирзЗ рж╢рзБржзрзБ ProfilePage-ржХрзЗ render ржХрж░ржЫрж┐
  return <ProfilePage />;
}
